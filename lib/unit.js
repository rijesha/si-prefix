// Generated by CoffeeScript 1.6.3
(function() {
  var Unit;

  module.exports = Unit = (function() {
    var abs, floor, log, max, pow, round, sub;

    abs = Math.abs, floor = Math.floor, log = Math.log, max = Math.max, pow = Math.pow;

    round = function(v) {
      return parseFloat(v.toFixed(12));
    };

    sub = function(a, b) {
      return a - b;
    };

    function Unit(si, unit) {
      this.si = si;
      this.unit = unit;
      this.baseln = log(this.si.base);
      this.limit = Object.keys(this.si).sort(sub).shift();
    }

    Unit.prototype.format = function(value, separator, places) {
      if (separator == null) {
        separator = '';
      }
      if (places) {
        var val = this.convert(value);
        val[0].toFixed(places)
        return val.join(separator);
      } else {
        return this.convert(value).join(separator);
      }
    };

    Unit.prototype.suffix = function(value) {
      return this.convert(value)[1];
    };

    Unit.prototype.convert = function(value) {
      var exp, sign;
      if (!(value && isFinite(value))) {
        return [value, this.si[0] + this.unit];
      }
      sign = value / (value = abs(value));
      exp = max(this.limit, floor(log(value) / this.baseln));
      while (!(exp in this.si) && exp > this.limit) {
        exp--;
      }
      value = round(sign * value / pow(this.si.base, exp));
      return [value, this.si[exp] + this.unit];
    };

    return Unit;

  })();

}).call(this);
