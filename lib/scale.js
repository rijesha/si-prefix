// Generated by CoffeeScript 1.6.3
(function() {
  var BinaryScale, MassScale, Scale,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Scale = (function() {
    var defaults, log, log10, round;

    log = Math.log, round = Math.round;

    log10 = log(10);

    defaults = {
      base: 1000,
      minor: false,
      shift: null,
      above: {
        1: 'da',
        2: 'h',
        3: 'k',
        6: 'M',
        9: 'G',
        12: 'T',
        15: 'P',
        18: 'E',
        21: 'Z',
        24: 'Y'
      },
      below: {
        1: 'd',
        2: 'c',
        3: 'm',
        6: 'Âµ',
        9: 'n',
        12: 'p',
        15: 'f',
        18: 'a',
        21: 'z',
        24: 'y'
      }
    };

    function Scale(opts) {
      var divisor;
      (opts != null ? opts : opts = {}).__proto__ = defaults;
      divisor = 3;
      if (opts.minor) {
        divisor = false;
        if (!Object.hasOwnProperty(opts, 'base')) {
          opts.base = 10;
        }
      }
      Object.defineProperty(this, 'base', {
        value: opts.base
      });
      if (opts.above) {
        this.build(opts.above, divisor, opts.shift);
      }
      if (opts.below) {
        this.build(opts.below, divisor, opts.shift, -1);
      }
      this[0 + opts.shift] = '';
    }

    Scale.prototype.build = function(set, div, shift, flip) {
      var k, v, _results;
      if (flip == null) {
        flip = 1;
      }
      _results = [];
      for (k in set) {
        v = set[k];
        k = parseInt(k);
        if (div) {
          k /= div;
        }
        if (k < 1) {
          continue;
        }
        if (shift) {
          k += shift * flip;
        }
        _results.push(this[round(k * flip)] = v);
      }
      return _results;
    };

    return Scale;

  })();

  Scale.Binary = BinaryScale = (function(_super) {
    var _above;

    __extends(BinaryScale, _super);

    _above = {
      3: 'Ki',
      6: 'Mi',
      9: 'Gi',
      12: 'Ti',
      15: 'Pi',
      18: 'Ei',
      21: 'Zi',
      24: 'Yi'
    };

    function BinaryScale() {
      BinaryScale.__super__.constructor.call(this, {
        base: 1024,
        above: _above,
        below: false
      });
    }

    return BinaryScale;

  })(Scale);

  Scale.Mass = MassScale = (function(_super) {
    __extends(MassScale, _super);

    function MassScale() {
      MassScale.__super__.constructor.call(this, {
        shift: -1
      });
    }

    return MassScale;

  })(Scale);

  module.exports = Scale;

}).call(this);
